name: Benchmarks

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        mode: [baseline, tinylfu_admit]           # policies for the main figures
        capacity: [25600, 51200, 102400]          # 50MB, 100MB, 200MB (â‰ˆ items)
        include:
          # Optional ablation: uncomment to also run k=3 and get the ablation row
          # - mode: tinylfu_k3
          #   capacity: 25600
          # - mode: tinylfu_k3
          #   capacity: 51200
          # - mode: tinylfu_k3
          #   capacity: 102400

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # plotting deps (if not already in requirements.txt)
          pip install pandas matplotlib

      - name: Ensure data/results dirs
        run: mkdir -p data results

      - name: Generate trace if missing (deterministic, CI-friendly)
        run: |
          cat > gen_trace.py <<'PY'
          import json, random, os
          p = "data/freq_wins_50k.jsonl"
          if not os.path.exists(p):
              random.seed(42)
              hot  = [f"hot-{i}"  for i in range(50)]
              cold = [f"cold-{i}" for i in range(2000)]
              with open(p, "w", encoding="utf-8") as f:
                  # ~5k lines to keep CI fast but still show policy effects
                  for _ in range(5000):
                      key = random.choice(hot) if random.random() < 0.6 else random.choice(cold)
                      f.write(json.dumps({"prompt": key, "response": f"response-for-{key}"}) + "\n")
          print("trace_ready:", p)
          PY
          python gen_trace.py

      - name: Sanity check files
        run: |
          ls -lah
          ls -lah data || true
          head -n 3 data/freq_wins_50k.jsonl || true

      - name: Run ${{ matrix.mode }} at capacity=${{ matrix.capacity }}
        shell: bash
        run: |
          EXTRA=""
          if [ "${{ matrix.mode }}" = "tinylfu_admit" ]; then
            EXTRA="--admit-k 2"
          elif [ "${{ matrix.mode }}" = "tinylfu_k3" ]; then
            EXTRA=""  # script enforces k=3 internally for this mode, or pass --admit-k 3 if needed
          fi
          python3 bench_gptcache.py \
            --trace data/freq_wins_50k.jsonl \
            --dim 512 \
            --capacity ${{ matrix.capacity }} \
            --base-lat 0.0005 \
            --per-token 0.0002 \
            --mode ${{ matrix.mode }} \
            $EXTRA \
            --outdir results

      - name: Plot results (guarded)
        if: ${{ matrix.mode == 'tinylfu_admit' && matrix.capacity == 102400 }}
        run: |
          if [ -f plot_results.py ]; then
            python3 plot_results.py
          else
            echo "plot_results.py not found; skipping plot step."
          fi

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ matrix.mode }}-${{ matrix.capacity }}
          path: |
            results/**
            !**/__pycache__/**
